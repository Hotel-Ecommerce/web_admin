import React, { useState } from 'react';
import { Modal, Form, Button, Alert, Spinner } from 'react-bootstrap';
import { FaUser, FaEnvelope, FaPhone, FaMapMarkerAlt, FaLock } from 'react-icons/fa';
import { addCustomer } from '../../CustomerAPI';
import CloseModalButton from '../../../../components/CloseModalButton/CloseModalButton';
import styles from './AddCustomerModal.module.scss';

const AddCustomerModal = ({ show, onHide, onAdd, loading }) => {
  const [formData, setFormData] = useState({
    fullName: '',
    email: '',
    phone: '',
    address: '',
    password: '123456' // Default password for new customers
  });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleClose = () => {
    setFormData({
      fullName: '',
      email: '',
      phone: '',
      address: '',
      password: '123456'
    });
    setError('');
    setSuccess('');
    onHide();
  };

  const validateForm = () => {
    if (!formData.fullName.trim()) {
      setError('H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      return false;
    }

    if (formData.fullName.trim().length < 2) {
      setError('H·ªç v√† t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
      return false;
    }

    if (!formData.email.trim()) {
      setError('Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      return false;
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
      setError('Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
      return false;
    }

    if (!formData.phone.trim()) {
      setError('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      return false;
    }

    // Validate phone format (Vietnamese phone number)
    const phoneRegex = /^(\+84|84|0)[3|5|7|8|9][0-9]{8}$/;
    if (!phoneRegex.test(formData.phone)) {
      setError('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. V√≠ d·ª•: 0123456789 ho·∫∑c +84123456789');
      return false;
    }

    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    if (!validateForm()) {
      return;
    }

    try {
      await onAdd(formData);
      setSuccess('Th√™m kh√°ch h√†ng th√†nh c√¥ng!');
      
      // Auto close modal after 2 seconds
      setTimeout(() => {
        handleClose();
      }, 2000);
    } catch (err) {
      setError(err?.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi th√™m kh√°ch h√†ng');
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    // Clear error when user starts typing
    if (error) setError('');
  };

  return (
    <Modal show={show} onHide={handleClose} centered className={styles['add-customer-modal']}>
      <Modal.Header closeButton>
        <Modal.Title>
          <FaUser className="me-2" />
          Th√™m kh√°ch h√†ng m·ªõi
        </Modal.Title>
        <CloseModalButton onClick={handleClose} />
      </Modal.Header>
      <Modal.Body>
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>
              <FaUser className="me-2" />
              H·ªç v√† t√™n *
            </Form.Label>
            <Form.Control
              type="text"
              name="fullName"
              value={formData.fullName}
              onChange={handleChange}
              required
              disabled={loading}
              placeholder="Nh·∫≠p h·ªç v√† t√™n kh√°ch h√†ng"
              minLength={2}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>
              <FaEnvelope className="me-2" />
              Email *
            </Form.Label>
            <Form.Control
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              required
              disabled={loading}
              placeholder="example@email.com"
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>
              <FaPhone className="me-2" />
              S·ªë ƒëi·ªán tho·∫°i *
            </Form.Label>
            <Form.Control
              type="tel"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              required
              disabled={loading}
              placeholder="0123456789"
            />
            <Form.Text className="text-muted">
              ƒê·ªãnh d·∫°ng: 0123456789 ho·∫∑c +84123456789
            </Form.Text>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>
              <FaMapMarkerAlt className="me-2" />
              ƒê·ªãa ch·ªâ
            </Form.Label>
            <Form.Control
              as="textarea"
              rows={3}
              name="address"
              value={formData.address}
              onChange={handleChange}
              disabled={loading}
              placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ kh√°ch h√†ng"
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>
              <FaLock className="me-2" />
              M·∫≠t kh·∫©u
            </Form.Label>
            <Form.Control
              type="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              disabled={loading}
              placeholder="Nh·∫≠p m·∫≠t kh·∫©u cho kh√°ch h√†ng"
            />
            <Form.Text className="text-muted">
              ƒê·ªÉ tr·ªëng ƒë·ªÉ s·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh: 123456
            </Form.Text>
          </Form.Group>

          <Alert variant="info">
            <strong>üí° L∆∞u √Ω:</strong> 
            <ul className="mb-0 mt-2">
              <li>Kh√°ch h√†ng m·ªõi s·∫Ω c√≥ m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh l√† "123456" n·∫øu kh√¥ng nh·∫≠p</li>
              <li>Email v√† s·ªë ƒëi·ªán tho·∫°i ph·∫£i l√† duy nh·∫•t trong h·ªá th·ªëng</li>
              <li>Kh√°ch h√†ng c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay sau khi ƒë∆∞·ª£c t·∫°o</li>
            </ul>
          </Alert>

          {error && <Alert variant="danger">{error}</Alert>}
          {success && <Alert variant="success">{success}</Alert>}

          <div className="d-flex justify-content-end gap-2">
            <Button variant="secondary" onClick={handleClose} disabled={loading}>
              H·ªßy
            </Button>
            <Button type="submit" variant="primary" disabled={loading}>
              {loading ? (
                <>
                  <Spinner size="sm" animation="border" className="me-2" />
                  ƒêang th√™m...
                </>
              ) : (
                'Th√™m kh√°ch h√†ng'
              )}
            </Button>
          </div>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

export default AddCustomerModal; 