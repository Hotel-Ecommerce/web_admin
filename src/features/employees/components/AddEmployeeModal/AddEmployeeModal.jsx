import React, { useState } from 'react';
import { Modal, Button, Form, Alert, Spinner } from 'react-bootstrap';
import { addEmployee } from '../../EmployeeAPI';

const AddEmployeeModal = ({ open, onClose, token, onAdded }) => {
  const [form, setForm] = useState({
    fullName: '',
    email: '',
    phone: '',
    role: 'Manager',
    password: ''
  });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [loading, setLoading] = useState(false);

  const handleChange = e => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    
    // Validation v·ªõi th√¥ng b√°o chi ti·∫øt
    if (!form.fullName.trim()) {
      setError('‚ùå Vui l√≤ng nh·∫≠p h·ªç t√™n nh√¢n vi√™n.');
      return;
    }
    if (!form.email.trim()) {
      setError('‚ùå Vui l√≤ng nh·∫≠p email nh√¢n vi√™n.');
      return;
    }
    if (!form.role) {
      setError('‚ùå Vui l√≤ng ch·ªçn vai tr√≤ cho nh√¢n vi√™n.');
      return;
    }
    if (!form.password.trim()) {
      setError('‚ùå Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u cho nh√¢n vi√™n.');
      return;
    }
    if (form.password.length < 6) {
      setError('‚ùå M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.');
      return;
    }
    
    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(form.email)) {
      setError('‚ùå Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Vui l√≤ng ki·ªÉm tra l·∫°i.');
      return;
    }
    
    // Validate phone number (optional but if provided, must be valid)
    if (form.phone && !/^[0-9+\-\s()]{10,15}$/.test(form.phone)) {
      setError('‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë√∫ng ƒë·ªãnh d·∫°ng.');
      return;
    }
    
    setLoading(true);
    try {
      await addEmployee(form, token);
      setSuccess(`‚úÖ Th√™m nh√¢n vi√™n "${form.fullName}" th√†nh c√¥ng! 
      
üìã Th√¥ng tin nh√¢n vi√™n m·ªõi:
‚Ä¢ H·ªç t√™n: ${form.fullName}
‚Ä¢ Email: ${form.email}
‚Ä¢ Vai tr√≤: ${form.role === 'Manager' ? 'Qu·∫£n l√Ω' : 'Admin'}
‚Ä¢ S·ªë ƒëi·ªán tho·∫°i: ${form.phone || 'Ch∆∞a c·∫≠p nh·∫≠t'}

üí° Nh√¢n vi√™n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay v·ªõi email v√† m·∫≠t kh·∫©u ƒë√£ t·∫°o.`);
      setForm({ fullName: '', email: '', phone: '', role: 'Manager', password: '' });
      if (onAdded) onAdded();
      setTimeout(() => {
        setSuccess('');
        onClose();
      }, 3000);
    } catch (err) {
      console.error('Add employee error:', err);
      if (err.response?.data?.message) {
        setError(`‚ùå ${err.response.data.message}`);
      } else if (err.response?.status === 409) {
        setError('‚ùå Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng. Vui l√≤ng s·ª≠ d·ª•ng email kh√°c.');
      } else if (err.response?.status === 400) {
        setError('‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.');
      } else if (err.response?.status === 401) {
        setError('‚ùå Kh√¥ng c√≥ quy·ªÅn th√™m nh√¢n vi√™n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      } else if (err.response?.status === 500) {
        setError('‚ùå L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.');
      } else {
        setError('‚ùå C√≥ l·ªói x·∫£y ra khi th√™m nh√¢n vi√™n. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setError('');
    setSuccess('');
    setForm({ fullName: '', email: '', phone: '', role: 'Manager', password: '' });
    onClose();
  };

  if (!open) return null;

  return (
    <Modal show={open} onHide={handleClose} centered>
      <Modal.Header closeButton>
        <Modal.Title>Th√™m nh√¢n vi√™n m·ªõi</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {error && <Alert variant="danger">{error}</Alert>}
        {success && <Alert variant="success">{success}</Alert>}
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>H·ªç t√™n</Form.Label>
            <Form.Control
              type="text"
              name="fullName"
              value={form.fullName}
              onChange={handleChange}
              required
            />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Email</Form.Label>
            <Form.Control
              type="email"
              name="email"
              value={form.email}
              onChange={handleChange}
              required
            />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>S·ªë ƒëi·ªán tho·∫°i</Form.Label>
            <Form.Control
              type="tel"
              name="phone"
              value={form.phone}
              onChange={handleChange}
            />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Vai tr√≤</Form.Label>
            <Form.Select
              name="role"
              value={form.role}
              onChange={handleChange}
              required
            >
              <option value="Manager">Manager</option>
              <option value="Admin">Admin</option>
            </Form.Select>
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>M·∫≠t kh·∫©u</Form.Label>
            <Form.Control
              type="password"
              name="password"
              value={form.password}
              onChange={handleChange}
              required
            />
          </Form.Group>
          <div className="text-end">
            <Button variant="secondary" onClick={handleClose} disabled={loading}>Hu·ª∑</Button>{' '}
            <Button variant="primary" type="submit" disabled={loading}>
              {loading ? <Spinner animation="border" size="sm" /> : 'L∆∞u'}
            </Button>
          </div>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

export default AddEmployeeModal; 