import React, { useState, useEffect } from 'react';
import { updateEmployee, resetEmployeePassword } from '../../EmployeeAPI';
import styles from './UpdateEmployeeModal.module.scss';

const UpdateEmployeeModal = ({ open, onClose, employee, token, onUpdated }) => {
  const [form, setForm] = useState({
    id: '',
    fullName: '',
    email: '',
    phone: '',
    role: ''
  });
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  useEffect(() => {
    if (employee) {
      setForm({
        id: employee._id,
        fullName: employee.fullName || '',
        email: employee.email || '',
        phone: employee.phone || '',
        role: employee.role || ''
      });
    }
  }, [employee]);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(null);
    
    // Validation
    if (!form.fullName.trim()) {
      setError('‚ùå Vui l√≤ng nh·∫≠p h·ªç t√™n nh√¢n vi√™n.');
      setLoading(false);
      return;
    }
    if (!form.email.trim()) {
      setError('‚ùå Vui l√≤ng nh·∫≠p email nh√¢n vi√™n.');
      setLoading(false);
      return;
    }
    if (!form.role) {
      setError('‚ùå Vui l√≤ng ch·ªçn vai tr√≤ cho nh√¢n vi√™n.');
      setLoading(false);
      return;
    }
    
    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(form.email)) {
      setError('‚ùå Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Vui l√≤ng ki·ªÉm tra l·∫°i.');
      setLoading(false);
      return;
    }
    
    // Validate phone number (optional but if provided, must be valid)
    if (form.phone && !/^[0-9+\-\s()]{10,15}$/.test(form.phone)) {
      setError('‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë√∫ng ƒë·ªãnh d·∫°ng.');
      setLoading(false);
      return;
    }
    
    try {
      await updateEmployee(form, token);
      setSuccess(`‚úÖ C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n th√†nh c√¥ng!

üìã Th√¥ng tin ƒë√£ c·∫≠p nh·∫≠t:
‚Ä¢ H·ªç t√™n: ${form.fullName}
‚Ä¢ Email: ${form.email}
‚Ä¢ Vai tr√≤: ${form.role === 'Manager' ? 'Qu·∫£n l√Ω' : 'Admin'}
‚Ä¢ S·ªë ƒëi·ªán tho·∫°i: ${form.phone || 'Ch∆∞a c·∫≠p nh·∫≠t'}

üí° Thay ƒë·ªïi s·∫Ω c√≥ hi·ªáu l·ª±c ngay l·∫≠p t·ª©c.`);
      if (onUpdated) onUpdated();
      setTimeout(() => {
        onClose();
      }, 3000);
    } catch (err) {
      console.error('Update employee error:', err);
      if (err.response?.data?.message) {
        setError(`‚ùå ${err.response.data.message}`);
      } else if (err.response?.status === 404) {
        setError('‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n n√†y. C√≥ th·ªÉ ƒë√£ b·ªã x√≥a.');
      } else if (err.response?.status === 409) {
        setError('‚ùå Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng. Vui l√≤ng s·ª≠ d·ª•ng email kh√°c.');
      } else if (err.response?.status === 400) {
        setError('‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.');
      } else if (err.response?.status === 401) {
        setError('‚ùå Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      } else if (err.response?.status === 403) {
        setError('‚ùå Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t nh√¢n vi√™n n√†y.');
      } else if (err.response?.status === 500) {
        setError('‚ùå L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.');
      } else {
        setError('‚ùå C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t nh√¢n vi√™n. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleResetPassword = async () => {
    if (!password.trim()) {
      setError('‚ùå Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi.');
      return;
    }
    if (password.length < 6) {
      setError('‚ùå M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.');
      return;
    }
    
    setLoading(true);
    setError(null);
    setSuccess(null);
    try {
      await resetEmployeePassword(form.id, password, token);
      setSuccess(`‚úÖ Reset m·∫≠t kh·∫©u th√†nh c√¥ng!

üîê M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t cho nh√¢n vi√™n "${form.fullName}"

üí° Nh√¢n vi√™n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay v·ªõi m·∫≠t kh·∫©u m·ªõi.`);
      setPassword('');
    } catch (err) {
      console.error('Reset password error:', err);
      if (err.response?.data?.message) {
        setError(`‚ùå ${err.response.data.message}`);
      } else if (err.response?.status === 404) {
        setError('‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n n√†y.');
      } else if (err.response?.status === 401) {
        setError('‚ùå Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      } else if (err.response?.status === 403) {
        setError('‚ùå Kh√¥ng c√≥ quy·ªÅn reset m·∫≠t kh·∫©u nh√¢n vi√™n n√†y.');
      } else if (err.response?.status === 500) {
        setError('‚ùå L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.');
      } else {
        setError('‚ùå C√≥ l·ªói x·∫£y ra khi reset m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } finally {
      setLoading(false);
    }
  };

  if (!open) return null;

  return (
    <div className={styles.modalOverlay}>
      <div className={styles.modal}>
        <h3>C·∫≠p nh·∫≠t nh√¢n vi√™n</h3>
        <form onSubmit={handleSubmit} className={styles.form}>
          <label>
            H·ªç t√™n:
            <input name="fullName" value={form.fullName} onChange={handleChange} required />
          </label>
          <label>
            Email:
            <input name="email" value={form.email} onChange={handleChange} required type="email" />
          </label>
          <label>
            S·ªë ƒëi·ªán tho·∫°i:
            <input name="phone" value={form.phone} onChange={handleChange} />
          </label>
          <label>
            Vai tr√≤:
            <select name="role" value={form.role} onChange={handleChange} required>
              <option value="">--Ch·ªçn vai tr√≤--</option>
              <option value="Manager">Manager</option>
              <option value="Admin">Admin</option>
            </select>
          </label>
          
          <div className={styles.passwordSection}>
            <h4>Reset M·∫≠t kh·∫©u</h4>
            <label>
              M·∫≠t kh·∫©u m·ªõi:
              <input 
                type="password" 
                value={password} 
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
              />
            </label>
            <button 
              type="button" 
              onClick={handleResetPassword} 
              disabled={loading || !password.trim()}
              className={styles.resetPasswordBtn}
            >
              {loading ? 'ƒêang reset...' : 'Reset M·∫≠t kh·∫©u'}
            </button>
          </div>
          
          {error && <div className={styles.error}>{error}</div>}
          {success && <div className={styles.success}>{success}</div>}
          <div className={styles.actions}>
            <button type="button" onClick={onClose} disabled={loading}>H·ªßy</button>
            <button type="submit" disabled={loading}>{loading ? 'ƒêang l∆∞u...' : 'L∆∞u thay ƒë·ªïi'}</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default UpdateEmployeeModal; 