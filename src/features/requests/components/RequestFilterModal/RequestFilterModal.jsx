import React, { useState, useEffect } from 'react';
import { Modal, Form, Button, Row, Col } from 'react-bootstrap';
import { FaFilter, FaTimes, FaCheck, FaSyncAlt } from 'react-icons/fa';
import styles from './RequestFilterModal.module.scss';

const RequestFilterModal = ({ 
  show, 
  onClose, 
  onApply, 
  initialFilter = {},
  customers = []
}) => {
  const [filter, setFilter] = useState({
    status: '',
    type: '',
    customerId: '',
    dateRange: '',
    ...initialFilter
  });

  const [tempFilter, setTempFilter] = useState(filter);

  useEffect(() => {
    setTempFilter(filter);
  }, [filter]);

  const handleInputChange = (field, value) => {
    console.log('üìù Input changed:', field, '=', value);
    setTempFilter(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleReset = () => {
    const resetFilter = {
      status: '',
      type: '',
      customerId: '',
      dateRange: ''
    };
    console.log('üîÑ Resetting filter:', resetFilter);
    setTempFilter(resetFilter);
    setFilter(resetFilter);
    onApply(resetFilter); // G·ªçi onApply ƒë·ªÉ √°p d·ª•ng reset ngay l·∫≠p t·ª©c
  };

  const handleApply = () => {
    console.log('üîç Applying filter:', tempFilter);
    setFilter(tempFilter);
    onApply(tempFilter);
    onClose();
  };

  const handleClose = () => {
    setTempFilter(filter);
    onClose();
  };

  const hasActiveFilters = () => {
    return Object.values(tempFilter).some(value => value !== '');
  };

  return (
    <Modal 
      show={show} 
      onHide={handleClose}
      size="lg"
      className={styles.filterModal}
    >
      <Modal.Header closeButton className={styles.modalHeader}>
        <Modal.Title>
          <FaFilter className={styles.filterIcon} />
          B·ªô l·ªçc n√¢ng cao
        </Modal.Title>
      </Modal.Header>
      
      <Modal.Body className={styles.modalBody}>
        <Row>
          <Col md={6}>
            <Form.Group className={styles.formGroup}>
              <Form.Label>Tr·∫°ng th√°i</Form.Label>
              <Form.Select
                value={tempFilter.status}
                onChange={(e) => handleInputChange('status', e.target.value)}
                className={styles.formControl}
              >
                <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                <option value="Pending">ƒêang ch·ªù</option>
                <option value="Approved">ƒê√£ duy·ªát</option>
                <option value="Disapproved">ƒê√£ t·ª´ ch·ªëi</option>
              </Form.Select>
            </Form.Group>
          </Col>
          
          <Col md={6}>
            <Form.Group className={styles.formGroup}>
              <Form.Label>Lo·∫°i y√™u c·∫ßu</Form.Label>
              <Form.Select
                value={tempFilter.type}
                onChange={(e) => handleInputChange('type', e.target.value)}
                className={styles.formControl}
              >
                <option value="">T·∫•t c·∫£ lo·∫°i</option>
                <option value="Update">C·∫≠p nh·∫≠t</option>
                <option value="Cancel">H·ªßy b·ªè</option>
              </Form.Select>
            </Form.Group>
          </Col>
        </Row>

        <Row>
          <Col md={6}>
            <Form.Group className={styles.formGroup}>
              <Form.Label>Kh√°ch h√†ng</Form.Label>
              <Form.Select
                value={tempFilter.customerId}
                onChange={(e) => handleInputChange('customerId', e.target.value)}
                className={styles.formControl}
              >
                <option value="">T·∫•t c·∫£ kh√°ch h√†ng</option>
                {customers.map(customer => (
                  <option key={customer._id} value={customer._id}>
                    {customer.fullName} - {customer.email}
                  </option>
                ))}
              </Form.Select>
            </Form.Group>
          </Col>
          
          <Col md={6}>
            <Form.Group className={styles.formGroup}>
              <Form.Label>Kho·∫£ng th·ªùi gian</Form.Label>
              <Form.Select
                value={tempFilter.dateRange}
                onChange={(e) => handleInputChange('dateRange', e.target.value)}
                className={styles.formControl}
              >
                <option value="">T·∫•t c·∫£ th·ªùi gian</option>
                <option value="today">H√¥m nay</option>
                <option value="week">Tu·∫ßn n√†y</option>
                <option value="month">Th√°ng n√†y</option>
                <option value="quarter">Qu√Ω n√†y</option>
                <option value="year">NƒÉm nay</option>
              </Form.Select>
            </Form.Group>
          </Col>
        </Row>

        <div className={styles.filterSummary}>
          <h6>B·ªô l·ªçc hi·ªán t·∫°i:</h6>
          <div className={styles.activeFilters}>
            {tempFilter.status && (
              <span className={styles.filterTag}>
                Tr·∫°ng th√°i: {tempFilter.status}
              </span>
            )}
            {tempFilter.type && (
              <span className={styles.filterTag}>
                Lo·∫°i: {tempFilter.type}
              </span>
            )}
            {tempFilter.customerId && (
              <span className={styles.filterTag}>
                Kh√°ch h√†ng: {customers.find(c => c._id === tempFilter.customerId)?.fullName || 'N/A'}
              </span>
            )}
            {tempFilter.dateRange && (
              <span className={styles.filterTag}>
                Th·ªùi gian: {tempFilter.dateRange}
              </span>
            )}
            {!hasActiveFilters() && (
              <span className={styles.noFilters}>Kh√¥ng c√≥ b·ªô l·ªçc n√†o</span>
            )}
          </div>
        </div>
      </Modal.Body>
      
      <Modal.Footer className={styles.modalFooter}>
        <Button 
          variant="outline-secondary" 
          onClick={handleReset}
          className={styles.resetBtn}
        >
          <FaSyncAlt size={14} />
          ƒê·∫∑t l·∫°i
        </Button>
        
        <div className={styles.actionButtons}>
          <Button 
            variant="outline-secondary" 
            onClick={handleClose}
            className={styles.cancelBtn}
          >
            <FaTimes size={14} />
            H·ªßy
          </Button>
          
          <Button 
            variant="primary" 
            onClick={handleApply}
            className={styles.applyBtn}
            disabled={!hasActiveFilters()}
          >
            <FaCheck size={14} />
            √Åp d·ª•ng
          </Button>
        </div>
      </Modal.Footer>
    </Modal>
  );
};

export default RequestFilterModal; 